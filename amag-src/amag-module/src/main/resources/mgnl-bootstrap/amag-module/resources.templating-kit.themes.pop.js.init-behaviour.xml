<?xml version="1.0" encoding="UTF-8"?>
<sv:node sv:name="init-behaviour" xmlns:sv="http://www.jcp.org/jcr/sv/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>mgnl:content</sv:value>
  </sv:property>
  <sv:property sv:name="jcr:mixinTypes" sv:type="Name">
    <sv:value>mix:lockable</sv:value>
  </sv:property>
  <sv:property sv:name="jcr:uuid" sv:type="String">
    <sv:value>35052f96-707e-459e-a1f0-da52724dca48</sv:value>
  </sv:property>
  <sv:property sv:name="bypass" sv:type="Boolean">
    <sv:value>false</sv:value>
  </sv:property>
  <sv:property sv:name="extension" sv:type="String">
    <sv:value>js</sv:value>
  </sv:property>
  <sv:property sv:name="jcr:created" sv:type="Date">
    <sv:value>2013-07-22T14:26:56.970+02:00</sv:value>
  </sv:property>
  <sv:property sv:name="modelClass" sv:type="String">
    <sv:value>info.magnolia.module.templatingkit.resources.STKResourceModel</sv:value>
  </sv:property>
  <sv:property sv:name="rights" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:property sv:name="source" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:property sv:name="text" sv:type="String">
    <sv:value xsi:type="xs:base64Binary"></sv:value>
  </sv:property>
  <sv:property sv:name="version" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:node sv:name="MetaData">
    <sv:property sv:name="jcr:primaryType" sv:type="Name">
      <sv:value>mgnl:metaData</sv:value>
    </sv:property>
    <sv:property sv:name="jcr:created" sv:type="Date">
      <sv:value>2013-07-22T14:26:56.970+02:00</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:authorid" sv:type="String">
      <sv:value>amag</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:creationdate" sv:type="Date">
      <sv:value>2013-07-22T14:26:56.970+02:00</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:lastmodified" sv:type="Date">
      <sv:value>2013-08-21T15:10:00.023+02:00</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:template" sv:type="String">
      <sv:value>processedJs</sv:value>
    </sv:property>
  </sv:node>
</sv:node>
