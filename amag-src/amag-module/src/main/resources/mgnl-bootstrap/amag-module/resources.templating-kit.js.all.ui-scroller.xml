<?xml version="1.0" encoding="UTF-8"?>
<sv:node sv:name="ui-scroller" xmlns:sv="http://www.jcp.org/jcr/sv/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>mgnl:content</sv:value>
  </sv:property>
  <sv:property sv:name="jcr:mixinTypes" sv:type="Name">
    <sv:value>mix:lockable</sv:value>
  </sv:property>
  <sv:property sv:name="jcr:uuid" sv:type="String">
    <sv:value>5dde8e59-171d-44f5-af43-314b6fca5b9f</sv:value>
  </sv:property>
  <sv:property sv:name="bypass" sv:type="Boolean">
    <sv:value>false</sv:value>
  </sv:property>
  <sv:property sv:name="extension" sv:type="String">
    <sv:value>js</sv:value>
  </sv:property>
  <sv:property sv:name="jcr:created" sv:type="Date">
    <sv:value>2013-07-22T14:26:52.298+02:00</sv:value>
  </sv:property>
  <sv:property sv:name="rights" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:property sv:name="source" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:property sv:name="text" sv:type="String">
    <sv:value xsi:type="xs:base64Binary"></sv:value>
  </sv:property>
  <sv:property sv:name="version" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:node sv:name="MetaData">
    <sv:property sv:name="jcr:primaryType" sv:type="Name">
      <sv:value>mgnl:metaData</sv:value>
    </sv:property>
    <sv:property sv:name="jcr:created" sv:type="Date">
      <sv:value>2013-07-22T14:26:52.298+02:00</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:activated" sv:type="Boolean">
      <sv:value>true</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:activatorid" sv:type="String">
      <sv:value>superuser</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:authorid" sv:type="String">
      <sv:value>amag</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:creationdate" sv:type="Date">
      <sv:value>2013-07-22T14:26:52.298+02:00</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:lastaction" sv:type="Date">
      <sv:value>2013-08-08T14:52:55.955+02:00</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:lastmodified" sv:type="Date">
      <sv:value>2013-08-12T16:07:15.060+02:00</sv:value>
    </sv:property>
    <sv:property sv:name="mgnl:template" sv:type="String">
      <sv:value>js</sv:value>
    </sv:property>
  </sv:node>
</sv:node>
